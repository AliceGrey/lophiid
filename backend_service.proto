syntax = "proto3";

option go_package = "/backend_service";

service BackendService {
  rpc HandleProbe(HandleProbeRequest) returns (HandleProbeResponse) {}
  rpc SendStatus(StatusRequest) returns (StatusResponse) {}
  rpc HandleUploadFile(UploadFileRequest) returns (UploadFileResponse) {}
}

// Stores 1:N
message KeyValues {
  string key = 1;
  repeated string value = 2;
}

// Stores 1:1
message KeyValue {
  string key = 1;
  string value = 2;
}

message DownloadInfo {
  string url = 1; // Origin of the file.
  string original_url = 2;
  string host_header = 3;
  string user_agent = 4;
  string content_type = 5;
  bytes data = 6; // The content of the file.
  double duration_sec = 7;
  string raw_http_response = 8;
  string ip = 9;
  string honeypot_ip = 10;
  string detected_content_type = 11;
}

message UploadFileRequest {
  int64 request_id = 1;
  DownloadInfo info = 2;
}

message UploadFileResponse {}

message StatusRequest {
  string ip = 1;
  repeated int64 listen_port = 2;
  repeated int64 listen_port_ssl = 3;
}

message StatusResponse {
  repeated Command command = 1;
}

// Commands are send from the server to the client. The client will poll the
// server regularly with SendStatus and in the response it will receive
// commands.
message CommandDownloadFile {
  string url = 1;
  string host_header = 2;
  string user_agent = 3;
  int64 request_id = 4;
  string original_url = 5;
  string ip = 6;
}

message CommandBlockURL {}

message Command {
  oneof command {
    CommandDownloadFile download_cmd = 1;
    CommandBlockURL block_url_cmd = 2;
  }
}

// Parsed URL values. Based on golang url.URL
message ParsedURL {
  string scheme = 1;
  string user = 2;
  string password = 3;
  string host = 4;
  int64 port = 5;
  string path = 6;
  repeated KeyValues query = 7;
  string raw_path = 8;
  string raw_query = 9;
  string fragment = 10;
}

// HttpRequest represents the HTTP request that is received from client.
message HttpRequest {
  int64 time_received = 1;
  string proto = 2;
  string method = 3;
  int64 content_length = 4;
  ParsedURL parsed_url = 5;
  repeated KeyValue header = 6;
  // TODO: Add cookies, parsed form data
  bytes body = 7;
  string remote_address = 8;
  string honeypot_ip = 9;
  string raw = 10;
}

// Contains all information needed to send an HTTP reply.
message HttpResponse {
  string status_code = 1;
  bytes body = 2;
  repeated KeyValue header = 3;
  repeated KeyValue cookie = 4;
}

message HandleProbeRequest {
  string request_uri = 1;
  HttpRequest request = 2;
}

message HandleProbeResponse {
  HttpResponse response = 1;
}
