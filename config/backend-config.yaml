backend:
  # The log level can be one of debug, info, warn and error.
  # https://pkg.go.dev/log/slog#Level
  log_level: debug
  log_file: backend.log
  downloader:
    # Location where downloaded malware will be stored.
    malware_download_dir: /home/niels/malware/
    # The malware downloaded HTTP client timeout. This should be relatively high
    # because sometimes malware is served from very slow IoT devices.
    http_timeout: 10m
  listener:
    # IP and port where the backend needs to listen on.
    listen_address: localhost:41110
    # The following SSL options are optional; use them for SSL server and client
    # authentication.
    ssl_cert: path/to/server-cert.pem
    ssl_key: path/to/server-key.pem
    ssl_ca_cert: path/to/ca-cert.pem

  database:
    # URL to the postgresql database
    url: postgres://username:password@localhost/lophiid
    # How many open concurrent database connections are allowed.
    max_open_connections: 30
    # How many connections to keep open all the time.
    min_open_connections: 10

  advanced:
    # How long to cache Content's that were fetched from the database.
    content_cache_duration: 30m
    # How long to cache download URLs which prevents them from being fetched
    # again if seen multiple times in a row during this time. Don't set this
    # too long because attacker payloads change over time and it's interesting
    # to track this by refetching the same payload URLs.
    download_cache_duration: 5m

alerting:
  # The alerting interval.  Alerts are aggregated and send every <interval>.
  interval: 2m
  telegram:
    # Telegram API key and channel ID.
    api_key: AAAAAAAAAAAAAAAAAAAA
    channel_id: 111111

scripting:
  # A list of commands that can be called from the content javascripts.
  allowed_commands:
    - /usr/bin/false

analysis:
  # Determines how long information for an IP will be cached before
  # writing it to the database. During that time the information will be
  # updated with new events if they happen.
  ip_cache_duration: 15m
  # How many events there can be in the queue. If this is exceeded then it
  # will start blocking some logic in the backend so keep this number high
  # and monitor the queue size with prometheus/grafana.
  ip_event_queue_size: 5000
  # Determines how long (approximately) the scan detection logic will keep
  # aggregating scan events into a cached version before writing it to the db.
  # So with the default below, if there is a super slow scan, you will
  # get an event every ~1 hour.
  scan_monitor_interval: 1h

virustotal:
  # Your virus total API key.
  api_key: AAAAAAAAAAAAAAAAAA
  # HTTP timeout for communication with virustotal.
  http_timeout: 2m
  # The time to cache URL and file scan results. Use this wisely to prevent
  # using up all your quota.
  cache_expiration_time: 96h

prometheus:
  listen_address: 127.0.0.1:8998

whois_manager:
  client_timeout: 2s
  cache_expiration_time: 12h
  max_attempts: 6

ratelimiter:
  rate_window: 1h
  bucket_duration: 1m
  max_requests_per_window: 1000
  max_requests_per_bucket: 50

responder:
  # Whether to enable the responder.
  enable: 1
  # API location. Note that the implementation was tested with Gemma 2 27b and
  # is not guaranteed to work with other versions or other LLMs.
  api_location: http://localhost:8000/v1
  api_key: AAAAAAAAAAAAAAAAAA
  # How long prompts and responses should be cached.
  cache_expiration_time: 24h
  # How long a completion is allowed to take.
  llm_completion_timeout: 60s
  # Maximum string length of the prompt input.
  max_input_characters: 4096
